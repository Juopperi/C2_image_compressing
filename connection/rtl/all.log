library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity conversion is 
    generic (
        scale : integer := 16;
        fixed_point_length : integer := 32;
        input_width : integer := 8  -- 允许范围：8 ~ 12
    );
    port (
        clk : std_logic;
        input_R : in std_logic_vector(input_width - 1 downto 0);
        input_G : in std_logic_vector(input_width - 1 downto 0);
        input_B : in std_logic_vector(input_width - 1 downto 0);
        output_Y  : out std_logic_vector(fixed_point_length - 1 downto 0);
        output_Cb : out std_logic_vector(fixed_point_length - 1 downto 0);
        output_Cr : out std_logic_vector(fixed_point_length - 1 downto 0)
    );
end conversion;

architecture conversion_arch of conversion is
    constant n299 : integer := integer(0.299 * 2**scale);
    constant n587 : integer := integer(0.587 * 2**scale); 
    constant n144 : integer := integer(0.114 * 2**scale); 
    
    constant n1687 : integer := integer(0.1687 * 2**scale); --0.1687*256
    constant n3313 : integer := integer(0.3313 * 2**scale); --0.3313*256
    constant n5 : integer := integer(0.5 * 2**scale); --0.5*256
    
    constant n4187 : integer := integer(0.4187 * 2**scale); --0.4187*256
    constant n0813 : integer := integer(0.0813 * 2**scale); --0.0813*256
    
    constant n128 : integer := 128 * 2**scale; --128*256
    
    signal Y : integer;
    signal Cr : integer;
    signal Cb : integer;
    
begin
    process(input_R,input_G,input_B,clk)
    begin
    Y <= (conv_integer(input_R)*n299 + conv_integer(input_G)*n587 + conv_integer(input_B)*n144 - n128);
    Cb <= (conv_integer(input_B)*n5 - conv_integer(input_R)*n1687 - conv_integer(input_G)*n3313);
    Cr <= (conv_integer(input_R)*n5 - conv_integer(input_G)*n4187 - conv_integer(input_B)*n0813);
    output_Y  <= std_logic_vector(to_signed(Y, fixed_point_length));
    output_Cb <= std_logic_vector(to_signed(Cb, fixed_point_length));
    output_Cr <= std_logic_vector(to_signed(Cr, fixed_point_length));

    
    -- Y <= (conv_integer(input_R)*n299 + conv_integer(input_G)*n587 + conv_integer(input_B)*n144 );
    -- Cb <= (conv_integer(input_B)*n5 - conv_integer(input_R)*n1687 - conv_integer(input_G)*n3313 + n128);
    -- Cr <= (conv_integer(input_R)*n5 - conv_integer(input_G)*n4187 - conv_integer(input_B)*n0813 + n128);
	
    -- output_Y <= std_logic_vector(to_unsigned(Y,fixed_point_length));
    -- output_Cb <= std_logic_vector(to_unsigned(Cb,fixed_point_length));
    -- output_Cr <= std_logic_vector(to_unsigned(Cr,fixed_point_length));


    end process;
end conversion_arch;




module rgb2ycbcr_container #(
    parameter fixed_point_length = 32
)(
    input wire clk,
    input wire [8*64-1:0] r_all, // 64个8位R
    input wire [8*64-1:0] g_all, // 64个8位G
    input wire [8*64-1:0] b_all, // 64个8位B
    output wire [fixed_point_length*64-1:0] y_all,
    output wire [fixed_point_length*64-1:0] cb_all,
    output wire [fixed_point_length*64-1:0] cr_all
);

    genvar i;
    generate
        for (i = 0; i < 64; i = i + 1) begin : gen_conversion
            wire [7:0] r = r_all[i*8 +: 8];
            wire [7:0] g = g_all[i*8 +: 8];
            wire [7:0] b = b_all[i*8 +: 8];
            
            wire [fixed_point_length-1:0] y, cb, cr;

            conversion  u_conversion (
                .clk(clk),
                .input_R(r),
                .input_G(g),
                .input_B(b),
                .output_Y(y),
                .output_Cb(cb),
                .output_Cr(cr)
            );

            assign y_all[i*fixed_point_length +: fixed_point_length] = y;
            assign cb_all[i*fixed_point_length +: fixed_point_length] = cb;
            assign cr_all[i*fixed_point_length +: fixed_point_length] = cr;
        end
    endgenerate

endmodule
// ============================================================================
// 8‑point 1‑D DCT (Chen) – 8 共享乘法器 / 零 DSP 版本
//   • 每行 8 样本用 4 clk 完成 (P0‑P3)；仅 8 个 LUT 乘法器
//   • 乘法器函数标注 (* use_dsp = "no" *) 强制综合到 LUT
// ============================================================================

`timescale 1ns / 1ps
(* use_dsp="no", use_dsp48="no" *)
module dct8_chen_ts #(
    parameter int IN_W     = 32,   // 数据位宽 (>= 像素 + FRAC)
    parameter int FRAC     = 8,    // 小数位
    parameter int CONST_W  = 10,   // 常量位宽
    parameter int NUM_MUL  = 8     // 并行乘法器数 (本例=8)
)(
    input  logic                      clk,
    input  logic                      rst_n,

    // 输入握手：1 行 8 样本
    input  logic                      in_valid,
    output logic                      in_ready,
    input  logic signed [IN_W-1:0]    in0,in1,in2,in3,in4,in5,in6,in7,

    // 输出握手：8 系数
    output logic                      out_valid,
    input  logic                      out_ready,
    output logic signed [IN_W-1:0]    out0,out1,out2,out3,
                                       out4,out5,out6,out7
);

    // --------------------------------------------------------------------
    // 常量 (×2^FRAC，FRAC = 8)
    // --------------------------------------------------------------------
    localparam logic signed [CONST_W-1:0]
        C1   = 10'sd251,
        C2   = 10'sd237,
        C3   = 10'sd213,
        C4   = 10'sd181,
        C6   = 10'sd98 ,
        SIN1 = 10'sd50 ,
        SIN3 = 10'sd142,
        K0   = 10'sd91 ,
        K    = 10'sd128;

    // --------------------------------------------------------------------
    // 乘法器 (组合 LUT 乘 + 右移)
    // --------------------------------------------------------------------
    function automatic logic signed [IN_W-1:0] mul_c
        (input logic signed [IN_W-1:0]    a,
         input logic signed [CONST_W-1:0] b);
        (* use_dsp="no", use_dsp48="no" *) logic signed [IN_W+CONST_W-1:0] p;
    begin
        p     = a * b;
        mul_c = p >>> FRAC;           // 截断保持 IN_W
    end
    endfunction

    // --------------------------------------------------------------------
    // FSM
    // --------------------------------------------------------------------
    typedef enum logic [2:0] {S_IDLE,P0,P1,P2,P3,S_WAIT} state_t;
    state_t state, nstate;

    // --------------------------------------------------------------------
    // Butterfly & 中间寄存
    // --------------------------------------------------------------------
    logic signed [IN_W-1:0]
        s0,s1,s2,s3,     // Sums
        d0,d1,d2,d3,     // Differences
        e0,e1,e2,e3,     // Even intermediates
        b0,b1,b2,b3,b4,b5,b6,b7; // Chen B[]

    logic signed [IN_W-1:0] y [0:7]; // final output regs
    logic signed [IN_W-1:0] t_b1, t_b5; // partial sums

    // --------------------------------------------------------------------
    // 共享乘法器 I/O
    // --------------------------------------------------------------------
    typedef struct packed {
        logic signed [IN_W-1:0]    a;
        logic signed [CONST_W-1:0] b;
    } job_t;

    job_t                job   [NUM_MUL];
    logic signed [IN_W-1:0] mul_y [NUM_MUL];

    genvar g;
    generate
        for(g=0; g<NUM_MUL; g++) begin
            assign mul_y[g] = mul_c(job[g].a, job[g].b);
        end
    endgenerate

    // --------------------------------------------------------------------
    // Input handshake
    // --------------------------------------------------------------------
    assign in_ready  = (state == S_IDLE);
    assign out_valid = (state == S_WAIT);

    // --------------------------------------------------------------------
    // State register
    // --------------------------------------------------------------------
    always_ff @(posedge clk or negedge rst_n)
        if(!rst_n) state <= S_IDLE;
        else       state <= nstate;

    // --------------------------------------------------------------------
    // Next‑state logic
    // --------------------------------------------------------------------
    always_comb begin
        nstate = state;
        case(state)
            S_IDLE : if(in_valid)  nstate = P0;
            P0     :               nstate = P1;
            P1     :               nstate = P2;
            P2     :               nstate = P3;
            P3     :               nstate = S_WAIT;
            S_WAIT : if(out_ready) nstate = S_IDLE;
        endcase
    end

    // --------------------------------------------------------------------
    // Capture input & Butterfly (S_IDLE)
    // --------------------------------------------------------------------
    always_ff @(posedge clk) begin
        if(state==S_IDLE && in_valid) begin
            s0 <= in0 + in7;   d0 <= in0 - in7;
            s1 <= in1 + in6;   d1 <= in1 - in6;
            s2 <= in2 + in5;   d2 <= in2 - in5;
            s3 <= in3 + in4;   d3 <= in3 - in4;

            e0 <= (in0 + in7) + (in3 + in4);
            e1 <= (in1 + in6) + (in2 + in5);
            e2 <= (in0 + in7) - (in3 + in4);
            e3 <= (in1 + in6) - (in2 + in5);

            b0 <= (in0 + in7) + (in3 + in4)
                + (in1 + in6) + (in2 + in5); // E0 + E1
        end
    end

    // --------------------------------------------------------------------
    // Multiplier job scheduler
    // --------------------------------------------------------------------
    integer k;
    always_comb begin
        for(k=0;k<NUM_MUL;k++) job[k] = '{default:0};

        case(state)
            // ------------------------- Phase 0
            P0: begin
                job[0] = '{a:(e0-e1), b:C4};
                job[1] = '{a: e2   , b:C2};
                job[2] = '{a: e3   , b:C6};
                job[3] = '{a: e2   , b:C6};
                job[4] = '{a: e3   , b:C2};
                job[5] = '{a: d0   , b:C1};
                job[6] = '{a: d1   , b:C3};
                job[7] = '{a: d2   , b:SIN3};
            end
            // ------------------------- Phase 1
            P1: begin
                job[0] = '{a: d3   , b:SIN1};
                job[1] = '{a: d0   , b:C3  };
                job[2] = '{a: d1   , b:SIN1};
                job[3] = '{a: d2   , b:C1  };
                job[4] = '{a: d3   , b:SIN3};
                job[5] = '{a: d0   , b:SIN3};
                job[6] = '{a: d1   , b:C1  };
                job[7] = '{a: d2   , b:SIN1};
            end
            // ------------------------- Phase 2
            P2: begin
                job[0] = '{a: d3   , b:C3  };
                job[1] = '{a: d0   , b:SIN1};
                job[2] = '{a: d1   , b:SIN3};
                job[3] = '{a: d2   , b:C3  };
                job[4] = '{a: d3   , b:C1  };
                job[5] = '{a: b0   , b:K0  };
                job[6] = '{a: b1   , b:K   };
                job[7] = '{a: b2   , b:K   };
            end
            // ------------------------- Phase 3
            P3: begin
                job[0] = '{a: b3   , b:K   };
                job[1] = '{a: b4   , b:K   };
                job[2] = '{a: b5   , b:K   };
                job[3] = '{a: b6   , b:K   };
                job[4] = '{a: b7   , b:K   };
            end
            default:;
        endcase
    end

    // --------------------------------------------------------------------
    // Phase‑specific accumulation & result generation
    // --------------------------------------------------------------------
    always_ff @(posedge clk) begin
        case(state)
            P0: begin
                b4      <= mul_y[0];
                b2      <= mul_y[1] + mul_y[2];
                b6      <= mul_y[3] - mul_y[4];
                t_b1    <= mul_y[5] + mul_y[6] + mul_y[7]; // 部分B1
            end

            P1: begin
                b1      <= t_b1 + mul_y[0];               // 完成B1
                b3      <=  mul_y[1] - mul_y[2]
                         -  mul_y[3] - mul_y[4];
                t_b5    <=  mul_y[5] - mul_y[6] + mul_y[7]; // 部分B5
            end

            P2: begin
                b5      <= t_b5 + mul_y[0];               // 完成B5
                b7      <=  mul_y[1] - mul_y[2]
                         +  mul_y[3] - mul_y[4];

                y[0]    <= mul_y[5];  // B0*K0
                y[1]    <= mul_y[6];  // B1*K
                y[2]    <= mul_y[7];  // B2*K
            end

            P3: begin
                y[3]    <= mul_y[0];
                y[4]    <= mul_y[1];
                y[5]    <= mul_y[2];
                y[6]    <= mul_y[3];
                y[7]    <= mul_y[4];
            end

            S_WAIT: if(out_ready) begin
                // 可选：清零寄存，非必需
            end
        endcase
    end

    // --------------------------------------------------------------------
    // Output mapping
    // --------------------------------------------------------------------
    assign {out0,out1,out2,out3,out4,out5,out6,out7} =
           {y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7]};

endmodule
// ============================================================================
// 8×8 2‑D DCT (基于单实例 dct8_chen_ts)
//   • 外部接口: 展平为单个大位宽的64点并行输入/输出
//   • 内部资源: 1 × dct8_chen_ts + 64 × IN_W RAM
// ============================================================================
`timescale 1ns/1ps
module dct8x8_chen_2d #(
    parameter int IN_W = 32,
    parameter int FRAC = 8
)(
    input  logic                     clk,
    input  logic                     rst_n,

    // ---------- 展平的64点输入接口 (8×8 像素) ----------
    input  logic                     in_valid,
    output logic                     in_ready,
    input  logic signed [64*IN_W-1:0] in_data,  // 64个输入点展平为一个大端口

    // ---------- 展平的64点输出接口 (8×8 DCT) ----------
    output logic                     out_valid,
    input  logic                     out_ready,
    output logic signed [64*IN_W-1:0] out_data  // 64个输出点展平为一个大端口
);

    // --------------------------------------------------------------------
    // 内部状态
    // --------------------------------------------------------------------
    typedef enum logic [2:0] {
        S_IDLE,        // 等待输入
        S_ROW_PROC,    // 处理行
        S_ROW_WAIT,    // 等待行结果
        S_COL_PROC,    // 处理列
        S_COL_WAIT,    // 等待列结果
        S_DONE         // 计算完成，输出就绪
    } state_t;

    state_t state, nstate;

    // 行/列计数
    logic [2:0] row_cnt, col_cnt;
    
    // 输入缓冲区 (64 x IN_W)
    logic signed [IN_W-1:0] input_buffer [0:63];
    
    // 输出缓冲区 (64 x IN_W)
    logic signed [IN_W-1:0] output_buffer [0:63];

    // --------------------------------------------------------------------
    // 行‑>列 转置 RAM  (64 × IN_W)
    // --------------------------------------------------------------------
    (* ram_style="block" *)
    logic signed [IN_W-1:0] trans_buff [0:63];

    // 写控制
    logic we_trans;
    logic signed [IN_W-1:0] wdata_trans [0:7];

    // RAM写控制
    always_ff @(posedge clk) begin
        if(we_trans) begin
            // 写入8个元素
            for(int j=0; j<8; j++) begin
                trans_buff[row_cnt*8 + j] <= wdata_trans[j];
            end
        end
    end

    // 读地址和数据
    logic [5:0] raddr_trans [0:7];
    logic signed [IN_W-1:0] rdata_trans [0:7];

    genvar i;
    generate
        for(i=0;i<8;i++) begin : g_colread
            assign rdata_trans[i] = trans_buff[raddr_trans[i]];
        end
    endgenerate

    // --------------------------------------------------------------------
    // 与 1‑D DCT 核心的连接
    // --------------------------------------------------------------------
    logic core_in_valid, core_in_ready;
    logic core_out_valid;
    logic signed [IN_W-1:0] core_in [0:7];
    logic signed [IN_W-1:0] core_out[0:7];

    dct8_chen_ts #(
        .IN_W   (IN_W),
        .FRAC   (FRAC)
    ) u_dct (
        .clk      (clk),
        .rst_n    (rst_n),

        .in_valid (core_in_valid),
        .in_ready (core_in_ready),
        .in0(core_in[0]),.in1(core_in[1]),.in2(core_in[2]),.in3(core_in[3]),
        .in4(core_in[4]),.in5(core_in[5]),.in6(core_in[6]),.in7(core_in[7]),

        .out_valid(core_out_valid),
        .out_ready(1'b1),                // 内部全速接受
        .out0(core_out[0]),.out1(core_out[1]),.out2(core_out[2]),.out3(core_out[3]),
        .out4(core_out[4]),.out5(core_out[5]),.out6(core_out[6]),.out7(core_out[7])
    );

    // --------------------------------------------------------------------
    // 顶层握手
    // --------------------------------------------------------------------
    assign in_ready = (state == S_IDLE);
    assign out_valid = (state == S_DONE);

    // 输出映射 - 将输出缓冲区内容展平到out_data
    // 按照行优先顺序进行拼接
    always_comb begin
        for (int i = 0; i < 64; i++) begin
            out_data[i*IN_W +: IN_W] = output_buffer[i];
        end
    end

    // --------------------------------------------------------------------
    // 当in_valid有效时，将展平的输入加载到缓冲区
    // --------------------------------------------------------------------
    always_ff @(posedge clk) begin
        if(state == S_IDLE && in_valid) begin
            for (int i = 0; i < 64; i++) begin
                input_buffer[i] <= in_data[i*IN_W +: IN_W];
            end
        end
    end

    // --------------------------------------------------------------------
    // 状态机
    // --------------------------------------------------------------------
    always_ff @(posedge clk or negedge rst_n)
        if(!rst_n) state <= S_IDLE;
        else       state <= nstate;

    always_comb begin
        nstate = state;
        case(state)
            S_IDLE:
                if(in_valid)
                    nstate = S_ROW_PROC;
            
            S_ROW_PROC:
                if(core_in_ready)
                    nstate = S_ROW_WAIT;
            
            S_ROW_WAIT:
                if(core_out_valid) begin
                    if(row_cnt == 3'd7)
                        nstate = S_COL_PROC;
                    else
                        nstate = S_ROW_PROC;
                end
            
            S_COL_PROC:
                if(core_in_ready)
                    nstate = S_COL_WAIT;
            
            S_COL_WAIT:
                if(core_out_valid) begin
                    if(col_cnt == 3'd7)
                        nstate = S_DONE;
                    else
                        nstate = S_COL_PROC;
                end
            
            S_DONE:
                if(out_ready)
                    nstate = S_IDLE;
            
            default:;
        endcase
    end

    // --------------------------------------------------------------------
    // DCT核心输入数据选择
    // --------------------------------------------------------------------
    always_comb begin
        // 默认：处理列（从转置缓冲区读取）
        for(int j=0; j<8; j++) begin
            core_in[j] = rdata_trans[j];
        end
        
        // 行处理阶段：从输入缓冲区选择
        if(state == S_ROW_PROC) begin
            for(int j=0; j<8; j++) begin
                core_in[j] = input_buffer[row_cnt*8 + j];
            end
        end
    end

    assign core_in_valid = (state == S_ROW_PROC) || (state == S_COL_PROC);

    // --------------------------------------------------------------------
    // 行计数
    // --------------------------------------------------------------------
    always_ff @(posedge clk or negedge rst_n)
        if(!rst_n)
            row_cnt <= 3'd0;
        else if(state == S_IDLE)
            row_cnt <= 3'd0;
        else if(state == S_ROW_WAIT && core_out_valid)
            row_cnt <= row_cnt + 3'd1;

    // --------------------------------------------------------------------
    // 行结果写入转置缓冲区
    // --------------------------------------------------------------------
    assign we_trans = (state == S_ROW_WAIT) && core_out_valid;
    
    // 核心输出连接到转置缓冲区写数据端口
    genvar w;
    generate
        for(w=0; w<8; w++) begin : g_wdata
            assign wdata_trans[w] = core_out[w];
        end
    endgenerate

    // --------------------------------------------------------------------
    // 列计数和转置缓冲区读地址生成
    // --------------------------------------------------------------------
    always_ff @(posedge clk or negedge rst_n)
        if(!rst_n)
            col_cnt <= 3'd0;
        else if(state == S_IDLE)
            col_cnt <= 3'd0;
        else if(state == S_COL_WAIT && core_out_valid)
            col_cnt <= col_cnt + 3'd1;

    // 生成列处理的读地址
    integer k;
    always_comb begin
        for(k=0; k<8; k++)
            raddr_trans[k] = k*6'd8 + col_cnt;  // 列固定，行递增
    end

    // --------------------------------------------------------------------
    // 存储列处理结果到最终输出缓冲区
    // --------------------------------------------------------------------
    always_ff @(posedge clk) begin
        if(state == S_COL_WAIT && core_out_valid) begin
            for(int j=0; j<8; j++) begin
                output_buffer[j*8 + col_cnt] <= core_out[j];
            end
        end
    end

endmodulemodule fixed_adder (
    input  wire [31:0] a,
    input  wire [31:0] b,
    output  [31:0] sum_out
);

    wire [32:0] sum_mag_raw;

    assign sum_mag_raw = a+b; // 保留进位

    assign sum_out = sum_mag_raw[31:0]; // 正常 


endmodule
module fixed_multiplier (
    input  wire [31:0] a,
    input  wire [31:0] b,
    output wire [31:0] mul_res
);

    // 中间结果 - 需要足够位宽存储完整乘积
    reg [63:0] product;
    reg [31:0] a_reg;
    reg [31:0] b_reg;
    integer i;
    
    // 最终结果 - 取中间位
    assign mul_res = product[47:16];
    
    // 乘法过程 - 通过移位和加法实现
    always @(*) begin
        // 初始化
        product = 64'b0;
        a_reg = a;
        b_reg = b;
        
        // 处理符号
        // 取绝对值进行计算
        if (a_reg[31])
            a_reg = (~a_reg + 1'b1);
        if (b_reg[31])
            b_reg = (~b_reg + 1'b1);
            
        // 使用移位和加法进行乘法运算
        for (i = 0; i < 32; i = i + 1) begin
            if (b_reg[i])
                product = product + ({32'b0, a_reg} << i);
        end
        
        // 处理结果符号
        // 当a和b符号不同时，结果为负
        if (a[31] ^ b[31])
            product = ~product + 1'b1;
    end

endmodulelibrary IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity fixed_multiplier_old is
  port (
    a        : in  std_logic_vector(31 downto 0);
    b        : in  std_logic_vector(31 downto 0);
    mul_res  : out std_logic_vector(31 downto 0)
  );
end entity;

architecture behavioral of fixed_multiplier_old is
  begin
    process(a, b)
      variable temp : signed(63 downto 0);
    begin
      temp := signed(a) * signed(b);
      mul_res <= std_logic_vector(temp(47 downto 16));
    end process;
  end architecture;
  library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.MATH_REAL.ALL;

entity fixed_operation is
  port (
    a       : in  std_logic_vector (31 downto 0);
    b       : in  std_logic_vector (31 downto 0);
    add_res : out std_logic_vector (31 downto 0);
    sub_res : out std_logic_vector (31 downto 0);
    mul_res : out std_logic_vector (31 downto 0);
    div_res : out std_logic_vector (31 downto 0)
  );
end entity;

architecture behavioral of fixed_operation is

  signal zero_result : std_logic_vector(31 downto 0) := (others => 'U');
begin
  process(a, b)
  -- multiplication variable
    variable temp_mul   : signed(63 downto 0); -- multiplication: 2 * (integer_bits + fractional_bits)
  -- division variable
    variable a_extended : signed(47 downto 0); --integer_bits + 2 * fractional_bits
    variable b_signed   : signed(31 downto 0);
    variable temp_div   : signed(31 downto 0);
  begin
  -- addition
    add_res <= std_logic_vector(signed(a) + signed(b));

  -- subtraction
    sub_res <= std_logic_vector(signed(a) - signed(b));

  -- multiplication
    temp_mul := signed(a) * signed(b);
    mul_res <= std_logic_vector(temp_mul(47 downto 16)); 

  -- division
      -- Compare b to a vector of zeros of the same length
    if b /= zero_result then
      -- Extend 'a' to include fractional bits for division
      a_extended := resize(signed(a) & to_signed(0, 16), 48);
      b_signed := signed(b);

      -- Perform the division
      temp_div := resize(a_extended / b_signed, 32);

      -- Assign the result to the output
      div_res <= std_logic_vector(temp_div);
    else
      -- Handle division by zero by assigning the pre-defined zero_result
      div_res <= zero_result;
    end if;

  end process;
end architecture;library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all; 
-- start simulation by typing in command line
-- restart -f no wave
-- add wave a
-- add wave b
-- add wave add_res
-- add wave sub_res
-- add wave mul_res
-- add wave div_res
-- run (a period of time eg. 50 ns)

entity tb_fixed_operation is
end tb_fixed_operation;

architecture test of tb_fixed_operation is
  component fixed_operation
    port (
      a       : in  std_logic_vector (31 downto 0);
      b       : in  std_logic_vector (31 downto 0);
      add_res : out std_logic_vector (31 downto 0);
      sub_res : out std_logic_vector (31 downto 0);
      mul_res : out std_logic_vector (31 downto 0);
      div_res : out std_logic_vector (31 downto 0)
    );
  end component;

    signal a       : std_logic_vector (31 downto 0);
    signal b       : std_logic_vector (31 downto 0);
    signal add_res : std_logic_vector (31 downto 0);
    signal sub_res : std_logic_vector (31 downto 0);
    signal mul_res : std_logic_vector (31 downto 0);
    signal div_res : std_logic_vector (31 downto 0);
  
  begin
    uut : fixed_operation
      port map(
        a => a,
        b => b,
        add_res => add_res,
        sub_res => sub_res,
        mul_res => mul_res,
        div_res => div_res
      );

    operation_test : process (a,b)
      begin
        a <= x"00010000"; -- 1 or type any value 
        b <= x"00020000"; -- 2 or type any value
    end process;
end test;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

package FixedPoint_Types is
    -- Define a 64-element array of Q16.16 fixed-point numbers
    type fixed_array is array (0 to 63) of std_logic_vector(31 downto 0);
    type integer_array is array (0 to 63) of integer;
end package FixedPoint_Types;
module jpeg_compression_pipeline #(
    parameter DATA_WIDTH = 15,
    parameter INPUT_WIDTH = 8,
    parameter DATA_DEPTH = 8,
    parameter PIXEL_COUNT = DATA_DEPTH * DATA_DEPTH  // 64 pixels (8x8 block)
) (
    input wire clk,
    input wire reset_n,
    // RGB inputs - 64 pixels, each with 8-bit R, G, B components
    input wire [INPUT_WIDTH*PIXEL_COUNT-1:0] r_all,
    input wire [INPUT_WIDTH*PIXEL_COUNT-1:0] g_all,
    input wire [INPUT_WIDTH*PIXEL_COUNT-1:0] b_all,
    // Final zigzag outputs for Y, Cb, Cr channels
    output wire [DATA_WIDTH*PIXEL_COUNT-1:0] y_zigzag,
    output wire [DATA_WIDTH*PIXEL_COUNT-1:0] cb_zigzag,
    output wire [DATA_WIDTH*PIXEL_COUNT-1:0] cr_zigzag
);

    // Stage 1: YCbCr Conversion
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] y_raw;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cb_raw;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cr_raw;

    rgb2ycbcr_container #(
        .fixed_point_length(DATA_WIDTH)
    ) ycbcr_stage (
        .clk(clk),
        .r_all(r_all),
        .g_all(g_all),
        .b_all(b_all),
        .y_all(y_raw),
        .cb_all(cb_raw),
        .cr_all(cr_raw)
    );

    // Stage 2: DCT Transform for Y/Cb/Cr channels
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] y_dct;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cb_dct;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cr_dct;

    wire y_in_ready;
    wire y_out_valid;
    reg y_in_valid = 1'b1;
    reg y_out_ready = 1'b1;

    // 使用新的DCT模块 - Y通道
    dct8x8_chen_2d #(
        .IN_W    (DATA_WIDTH),
        .FRAC    (8)         // 分数位数
    ) dct_y_stage (
        .clk(clk),
        .rst_n(reset_n),
        .in_valid(y_in_valid),
        .in_ready(y_in_ready),
        .in_data(y_raw),
        .out_valid(y_out_valid),
        .out_ready(y_out_ready),
        .out_data(y_dct)
    );

    wire cb_in_ready;
    wire cb_out_valid;
    reg cb_in_valid = 1'b1;
    reg cb_out_ready = 1'b1;

    // 使用新的DCT模块 - Cb通道
    dct8x8_chen_2d #(
        .IN_W    (DATA_WIDTH),
        .FRAC    (8)         // 分数位数
    ) dct_cb_stage (
        .clk(clk),
        .rst_n(reset_n),
        .in_valid(cb_in_valid),
        .in_ready(cb_in_ready),
        .in_data(cb_raw),
        .out_valid(cb_out_valid),
        .out_ready(cb_out_ready),
        .out_data(cb_dct)
    );

    wire cr_in_ready;
    wire cr_out_valid;
    reg cr_in_valid = 1'b1;
    reg cr_out_ready = 1'b1;

    // 使用新的DCT模块 - Cr通道
    dct8x8_chen_2d #(
        .IN_W    (DATA_WIDTH),
        .FRAC    (8)         // 分数位数
    ) dct_cr_stage (
        .clk(clk),
        .rst_n(reset_n),
        .in_valid(cr_in_valid),
        .in_ready(cr_in_ready),
        .in_data(cr_raw),
        .out_valid(cr_out_valid),
        .out_ready(cr_out_ready),
        .out_data(cr_dct)
    );

    // Stage 3: Quantization for Y/Cb/Cr channels
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] y_quant;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cb_quant;
    wire [DATA_WIDTH*PIXEL_COUNT-1:0] cr_quant;

    // Luma quantization (Y channel)
    quantize_array #(
        .USE_LUMA(1)  // Use luma quantization table
    ) quant_y_stage (
        .clk(clk),
        .pixels(y_dct),
        .q_result(y_quant)
    );

    // Chroma quantization (Cb and Cr channels)
    quantize_array #(
        .USE_LUMA(0)  // Use chroma quantization table
    ) quant_cb_stage (
        .clk(clk),
        .pixels(cb_dct),
        .q_result(cb_quant)
    );

    quantize_array #(
        .USE_LUMA(0)  // Use chroma quantization table
    ) quant_cr_stage (
        .clk(clk),
        .pixels(cr_dct),
        .q_result(cr_quant)
    );

    // Stage 4: Zigzag Reordering for Y/Cb/Cr channels
    zigzag_reorder zigzag_y_stage (
        .clk(clk),
        .input_matrix(y_quant),
        .zigzag_out(y_zigzag)
    );

    zigzag_reorder zigzag_cb_stage (
        .clk(clk),
        .input_matrix(cb_quant),
        .zigzag_out(cb_zigzag)
    );

    zigzag_reorder zigzag_cr_stage (
        .clk(clk),
        .input_matrix(cr_quant),
        .zigzag_out(cr_zigzag)
    );

endmodule
module quantize_array #(
    parameter USE_LUMA = 1  // 1: 使用 luma_qtable_inv, 0: chroma_qtable_inv
)(
    input  wire                   clk,         // 可用于时序约束/多周期路径
    input  wire [32*64-1:0]       pixels,      // 输入像素数组 (64 x 32-bit Q16.16)
    output wire [32*64-1:0]       q_result     // 输出乘法结果数组
);

    `include "inverse_qtables.vh"  // 包含 luma_qtable_inv, chroma_qtable_inv

    wire [32*64-1:0] inv_table;
    assign inv_table = (USE_LUMA) ? luma_qtable_inv : chroma_qtable_inv;

    genvar i;
    generate
        for (i = 0; i < 64; i = i + 1) begin : GEN_MULTS
            wire [31:0] pixel_i    = pixels[32*i +: 32];
            wire [31:0] inv_i      = inv_table[64*32 - 1 - 32*i -: 32];
            wire [31:0] result_i;

            fixed_multiplier u_mul (
                .a(pixel_i),
                .b(inv_i),
                .mul_res(result_i)
            );

            // assign result_i = (pixel_i * inv_i) >>> 16;

            assign q_result[32*i +: 32] = result_i;
        end
    endgenerate

endmodule
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity zigzag_reorder is
    port (
        clk : in std_logic;
        input_matrix : in  std_logic_vector(2047 downto 0); -- 64 x 32-bit flattened input
        zigzag_out   : out std_logic_vector(2047 downto 0)  -- 64 x 32-bit flattened output
    );
end entity;

architecture rtl of zigzag_reorder is

    -- Zigzag order mapping for 8x8 matrix
    type integer_array is array (0 to 63) of integer;
    constant zigzag_order : integer_array := (
         0,  1,  5,  6, 14, 15, 27, 28,
         2,  4,  7, 13, 16, 26, 29, 42,
         3,  8, 12, 17, 25, 30, 41, 43,
         9, 11, 18, 24, 31, 40, 44, 53,
        10, 19, 23, 32, 39, 45, 52, 54,
        20, 22, 33, 38, 46, 51, 55, 60,
        21, 34, 37, 47, 50, 56, 59, 61,
        35, 36, 48, 49, 57, 58, 62, 63
    );

    signal internal_out : std_logic_vector(2047 downto 0);

begin

    process(clk)
    begin
        if rising_edge(clk) then
            for i in 0 to 63 loop
                internal_out(32*i + 31 downto 32*i) <=
                    input_matrix(32*zigzag_order(i) + 31 downto 32*zigzag_order(i));
            end loop;
        end if;
    end process;

    zigzag_out <= internal_out;

end architecture;
